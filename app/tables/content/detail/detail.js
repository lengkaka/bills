// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var App, viewHelper;
    App = require('app/application');
    viewHelper = require('view_helper');
    return App.module('TablesApp.content', function(Content, App) {
      var EmptyView;
      Content.item = Marionette.ItemView.extend({
        className: 'item',
        template: require('templates/table/content/detail/detail_table_item.tpl')
      });
      EmptyView = Marionette.ItemView.extend({
        template: viewHelper.compile('<div id="empty">还没有items</div>')
      });
      Content.listA = Marionette.CompositeView.extend({
        className: 'table_list',
        template: require('templates/table/content/detail/detail_table.tpl'),
        itemView: Content.item,
        itemViewContainer: 'div.list',
        emptyView: EmptyView
      });
      return Content.list = Marionette.CompositeView.extend({
        className: 'table_list',
        template: require('templates/table/content/detail/detail_table.tpl'),
        headerTemplate: require('templates/table/content/detail/detail_table_header.tpl'),
        itemTemplate: require('templates/table/content/detail/detail_table_item.tpl'),
        emptyView: EmptyView,
        events: {
          'click #create_row': '_createRowAction'
        },
        onRender: function() {
          this.$table = this.$el.find('table');
          if (this.options.itemCollection.length > 0) {
            this._renderItems();
            this._hideEmptyView();
          }
          return this;
        },
        _createRowAction: function() {
          if (this.options.itemCollection.length === 0) {
            this._renderItems();
            this._hideEmptyView();
          }
          return this.$customTable.insertNewRow();
        },
        _renderItems: function() {
          var options;
          this._renderHeaders();
          this._renderAllItems();
          options = {
            add: function() {
              return console.log(arguments);
            },
            edit: function() {
              return console.log(arguments);
            },
            save: (function(_this) {
              return function($customTable, index, fields) {
                var editItemModel;
                console.log(arguments);
                index = _this.options.itemCollection.length - index - 1;
                editItemModel = _this.options.itemCollection.at(index);
                if (editItemModel) {
                  editItemModel.set('fields', fields);
                  _this._updateItemToServer(editItemModel);
                }
                return true;
              };
            })(this),
            deleteRow: (function(_this) {
              return function($customTable, index) {
                var editItemModel;
                console.log(arguments);
                index = _this.options.itemCollection.length - index - 1;
                editItemModel = _this.options.itemCollection.at(index);
                if (editItemModel && editItemModel.mode !== 'create') {
                  _this._removeItemToServer(editItemModel);
                }
                return true;
              };
            })(this),
            change: function() {
              return console.log(arguments);
            },
            selected: function() {
              return console.log(arguments);
            },
            insertRow: (function(_this) {
              return function() {
                var newItemModel, newItemObj;
                newItemObj = _this.options.tableModel.getTableEmptyItem();
                _this.options.itemCollection.add(newItemObj);
                newItemModel = _this.options.itemCollection.at(_this.options.itemCollection.length - 1);
                if (newItemModel) {
                  newItemModel.mode = 'create';
                }
                return _this.itemTemplate({
                  values: newItemObj
                });
              };
            })(this)
          };
          return this.$customTable = this.$table.customTable(options);
        },
        _renderHeaders: function() {
          var fields;
          this.$thead = this.$table.find('thead');
          fields = this.options.tableModel.getTableFields();
          return this.$thead.html(this.headerTemplate({
            fields: fields
          }));
        },
        _renderAllItems: function() {
          var length;
          this.$tbody = this.$table.find('tbody');
          length = this.options.itemCollection.length;
          return _.each(this.options.itemCollection.models, (function(_this) {
            return function(model, index) {
              var modelObj;
              modelObj = _.extend({
                index: length - index
              }, model.toJSON());
              return _this.$tbody.prepend(_this.itemTemplate({
                values: modelObj
              }));
            };
          })(this));
        },
        _hideEmptyView: function() {
          return this.$el.find('#empty').hide();
        },
        _removeItemToServer: function(itemModel) {
          var data, url;
          if (itemModel) {
            if (itemModel.mode === 'create') {
              return true;
            }
            url = "http://115.28.10.1:3000/tables/" + this.options.tableId;
            url = "" + url + "/item/delete";
            data = _.pick(itemModel.toJSON(), '_id');
            WJ.ajax({
              type: "POST",
              url: url,
              dataType: 'json',
              data: data,
              xhrFields: {
                'Access-Control-Allow-Origin': '*'
              }
            }).done((function(_this) {
              return function(result, textStatus, request) {
                var removed;
                removed = result.data;
                if (removed && removed.status === 200) {
                  _this.options.itemCollection.remove(itemModel);
                }
                return false;
              };
            })(this)).fail(function(request, textStatus, errThrown) {
              console.log("fail: " + textStatus);
              return false;
            });
          }
          return false;
        },
        _updateItemToServer: function(itemModel) {
          var data, url;
          if (itemModel) {
            url = "http://115.28.10.1:3000/tables/" + this.options.tableId;
            if (itemModel.mode === 'create') {
              url = "" + url + "/item/create";
            } else {
              url = "" + url + "/item/update";
            }
            data = itemModel.toJSON();
            WJ.ajax({
              type: "POST",
              url: url,
              dataType: 'json',
              data: data,
              xhrFields: {
                'Access-Control-Allow-Origin': '*'
              }
            }).done(function(result, textStatus, request) {
              var item;
              item = result.data[0];
              if (itemModel.mode === 'create') {
                itemModel.set(item, {
                  merge: true
                });
                itemModel.mode = 'done';
              }
              return false;
            }).fail(function(request, textStatus, errThrown) {
              console.log("fail: " + textStatus);
              return false;
            });
          }
          return false;
        }
      });
    });
  });

}).call(this);
