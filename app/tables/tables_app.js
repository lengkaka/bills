// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var App, LoadingView;
    App = require('app/application');
    require('app/tables/tables_layout');
    require('app/tables/sidebar/sidebar_view');
    require('app/tables/content/content_layout');
    require('app/tables/content/content_app');
    LoadingView = require('app/loading_view');
    return App.module('TablesApp', function(Tables, App) {
      var API;
      Tables.Router = Marionette.AppRouter.extend({
        appRoutes: {
          'tables': 'listTables',
          'tables/create': 'createTable',
          'tables/:id': 'showTable',
          'tables/:id/edit': 'editTable',
          'tables/:id/delete': 'deleteTable'
        },
        onRoute: function(name, path, args) {
          console.log("tables_onRoute fired");
          console.log(name, path, args);
          return App.execute('set:Nav', 'tables');
        }
      });
      API = {
        showTableLayoutAndNav: function(action, tableId) {
          var loadingView;
          loadingView = new LoadingView();
          App.mainRegion.show(loadingView);
          WJ.dc.request('collection/table').then((function(_this) {
            return function(_arg) {
              var entityCollection, result;
              entityCollection = _arg.entity, result = _arg.data;
              API.showTables(entityCollection, action, tableId);
              return false;
            };
          })(this)).then(function(params) {
            return false;
          });
          return false;
        },
        showTables: function(entityCollection, action, tableId) {
          var firstTable, table_sidebar;
          Tables.layout = new Tables.Layout();
          App.mainRegion.show(Tables.layout);
          table_sidebar = new Tables.Sidebar.List({
            collection: entityCollection
          });
          Tables.layout.sidebar.show(table_sidebar);
          if (entityCollection.length === 0) {
            App.navigate('/tables/create', {
              trigger: true
            });
            null;
          }
          if (action === 'listTables') {
            firstTable = entityCollection.at(0);
            App.navigate("/tables/" + (firstTable.get('id')), {
              trigger: true
            });
            null;
          }
          if (action === 'showTable') {
            return App.commands.execute('showTable', tableId, entityCollection.get(tableId));
          } else if (action === 'editTable') {
            return App.commands.execute('editTable', tableId, entityCollection.get(tableId));
          } else if (action === 'deleteTable') {
            return App.commands.execute('deleteTable', tableId, entityCollection.get(tableId));
          } else if (action === 'createTable') {
            return App.commands.execute('createTable');
          }
        },
        listTables: function() {
          App.router.action = 'tables:listTables';
          return this.showTableLayoutAndNav('listTables');
        },
        showTable: function(tableId) {
          App.router.action = 'tables:showTable';
          App.params.tableId = tableId;
          return this.showTableLayoutAndNav('showTable', tableId);
        },
        editTable: function(tableId) {
          App.router.action = 'tables:editTable';
          App.params.tableId = tableId;
          return this.showTableLayoutAndNav('editTable', tableId);
        },
        deleteTable: function(tableId) {
          App.router.action = 'tables:deleteTable';
          App.params.tableId = tableId;
          return this.showTableLayoutAndNav('deleteTable', tableId);
        },
        createTable: function() {
          App.router.action = 'tables:createTable';
          return this.showTableLayoutAndNav('createTable');
        }
      };
      App.on('tables:list', function() {
        return API.listTables();
      });
      App.on('tables:show', function(tableId) {
        return API.showTable(tableId)();
      });
      App.on('tables:edit', function(tableId) {
        return API.editTable(tableId)();
      });
      App.on('tables:delete', function(tableId) {
        return API.deleteTable(tableId)();
      });
      return App.addInitializer(function() {
        return new Tables.Router({
          controller: API
        });
      });
    });
  });

}).call(this);
